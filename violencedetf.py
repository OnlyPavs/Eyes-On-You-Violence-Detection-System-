# -*- coding: utf-8 -*-
"""Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YI_e2MDsNGP-exQJdxJmPKBsKROFB1t8
"""

pip install telepot

pip install --upgrade requests

pip install requests==2.11.1

pip install --upgrade pyrebase



pip install pyrebase4

pip install mtcnn

!pip install collections

import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore

cred = credentials.Certificate("/content/serviceAccountKey.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

pip install --upgrade oauth2client pydrive pydrive2 bigframes cachecontrol google-api-core google-cloud-bigquery google-cloud-storage google-colab pandas-datareader pooch spacy tensorboard tensorflow-datasets tweepy yfinance weasel

import collections.abc

from keras.models import load_model
from collections import deque
import matplotlib.pyplot as plt
import numpy as np
import argparse
import pickle
import cv2
import telepot
from datetime import datetime
import pytz
from PIL import Image
from PIL import ImageEnhance
#import pyrebase
import os
from matplotlib import pyplot
from matplotlib.patches import Rectangle
from matplotlib.patches import Circle
from mtcnn.mtcnn import MTCNN

def getTime():
  IST = pytz.timezone('Asia/Kolkata')
  timeNow = datetime.now(IST)
  return timeNow

import pyrebase

Config = {
    "apiKey": "AIzaSyAhq9po60nUlvNqeECc0mASikp28JkN4gs",
    "authDomain": "violencedet-5ee2d.firebaseapp.com",
    "projectId": "violencedet-5ee2d",
    "storageBucket": "violencedet-5ee2d.appspot.com",
    "messagingSenderId": "286899333254",
    "appId": "1:286899333254:web:35e7e3762e38fccfddc907",
  "databaseURL": ""
}

firebase = pyrebase.initialize_app(Config)
storage = firebase.storage()

auth = firebase.auth()
email = "percykane46@gmail.com"
password = "Work@459"
try:
    user = auth.sign_in_with_email_and_password(email, password)
    print("Successfully authenticated!")
    print("User ID Token:", user['idToken'])
except Exception as e:
    print("Error during authentication:", e)

def imgenhance():
  image1 = Image.open('savedImage.jpg')
  curr_bri = ImageEnhance.Sharpness(image1)
  new_bri = 1.3
  img_brightened = curr_bri.enhance(new_bri)
  im1 = img_brightened.save("bright.jpg")

  image2 = Image.open('bright.jpg')
  curr_col = ImageEnhance.Color(image2)
  new_col = 1.5
  img_col = curr_col.enhance(new_col)
  im2 = img_col.save("finalImage.jpg")

def draw_faces(filename, result_list):
    # load the image
    data = pyplot.imread(filename)
    # plot each face as a subplot
    for i in range(len(result_list)):
        # get coordinates
        x1, y1, width, height = result_list[i]['box']
        x2, y2 = x1 + width, y1 + height
        # define subplot
        pyplot.subplot(1, len(result_list), i+1)
        pyplot.axis('off')
        # plot face
        pyplot.imshow(data[y1:y2, x1:x2])
    # show the plot
    pyplot.savefig("faces.png")
    pyplot.show()

import random

previous_locations = []

import numpy as np
import argparse
import pickle
import cv2
from google.colab.patches import cv2_imshow
import os
import time
from keras.models import load_model
from collections import deque

def detectViolence(video, limit=None):
        global previous_locations
        trueCount = 0
        imageSaved = 0
        filename = 'savedImage.jpg'
        my_image = 'finalImage.jpg'
        face_image = 'faces.png'
        sendAlert = 0


        all_locations = ['New Jersey', 'Ontario', 'Jubilee Hills', 'Pithapuram', 'Chennai', 'Bangalore', 'New Delhi', 'Lucknow', 'Mumbai']


        if len(previous_locations) == len(all_locations):
            previous_locations = []


        available_locations = list(set(all_locations) - set(previous_locations))


        location = random.sample(available_locations, 1)[0]


        previous_locations.append(location)

        print("Loading model ...")
        model = load_model('/content/modelnew.h5')
        Q = deque(maxlen=128)
        vs = cv2.VideoCapture(video)
        writer = None
        (W, H) = (None, None)
        count = 0
        while True:
            (grabbed, frame) = vs.read()


            if not grabbed:
                break

           
            if W is None or H is None:
                (H, W) = frame.shape[:2]

           


            output = frame.copy()

            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            frame = cv2.resize(frame, (128, 128)).astype("float32")
            frame = frame.reshape(128, 128, 3) / 255

         
            preds = model.predict(np.expand_dims(frame, axis=0))[0]
#            
            Q.append(preds)

           
            results = np.array(Q).mean(axis=0)
            i = (preds > 0.50)[0]
            label = i

            text_color = (0, 255, 0) # default : green

            if label: # Violence prob
                text_color = (0, 0, 255) # red
                trueCount = trueCount + 1

            else:
                text_color = (0, 255, 0)

            text = "Violence: {}".format(label)
            FONT = cv2.FONT_HERSHEY_SIMPLEX

            cv2.putText(output, text, (35, 50), FONT,1.25, text_color, 3)

          
            if writer is None:
               
                fourcc = cv2.VideoWriter_fourcc(*"MJPG")
                writer = cv2.VideoWriter("recordedVideo.avi", fourcc, 30,(W, H), True)

          
            writer.write(output)

        
            cv2_imshow(output)

            if(trueCount == 40):
              if(imageSaved == 0):
                if(label):
                  cv2.imwrite(filename, output)
                  imageSaved = 1

              if(sendAlert == 0):
                timeMoment = getTime()
                imgenhance()
              
                pixels = pyplot.imread(my_image)
      
                detector = MTCNN()
           
                faces = detector.detect_faces(pixels)
              
                draw_faces(my_image, faces)

                bot = telepot.Bot('7136166679:AAHZzDDOrHWdcqv83lMtVP7BUAzOnSdS2Jg') #Don't Use this ID
                bot.sendMessage(6886499816, f"VIOLENCE ALERT!! \nLOCATION: {location} \nTIME: {timeMoment}")
                bot.sendPhoto(6886499816, photo=open('finalImage.jpg', 'rb'))
                bot.sendMessage(6886499816, "FACES OBTAINED")
                bot.sendPhoto(6886499816, photo=open('faces.png', 'rb'))

                storage.child(my_image).put(my_image)
                storage.child(face_image).put(face_image)
                from requests.exceptions import HTTPError



                try:
                     url1 = storage.child(my_image).get_url(user['idToken'])
                     url2 = storage.child(face_image).get_url(user['idToken'])
                     db.collection(location).add({'date': timeMoment, 'image': url1, 'faces': url2})
                     sendAlert = 1
                     print("Image uploaded successfully!")
                except HTTPError as e:
                    print("Error:", e)

      

            key = cv2.waitKey(1) & 0xFF

            # if the `q` key was pressed, break from the loop
            if key == ord("q"):
                break
        # release the file pointersq
        print("[INFO] cleaning up...")
        #writer.release()
        #vs.release()

V_path = "V_19.mp4"
NonV_path = "nonv.mp4"
V_test = "/content/4761711-uhd_4096_2160_25fps.mp4"
V_test2 = "/content/1543760-hd_1920_1080_25fps.mp4"

detectViolence(V_path)